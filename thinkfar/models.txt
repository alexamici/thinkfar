
We define generic asset model for users to choose:

    >>> from thinkfar.views import initdb
    >>> initdb()
    >>> from thinkfar.models import AssetModel
    >>> big_ticket_item = AssetModel.get_by_name('Vehicle')
    >>> commodity_stock = AssetModel.get_by_name('Commodity')

Most stuff refers to the currently logged user:

    >>> from google.appengine.api.users import User
    >>> current_user = User(email=u'syd@pf.com')

Users have one or more portfolios of assets:

    >>> from thinkfar.models import Portfolio
    >>> piper_belongings = Portfolio(owner=current_user, name=u'Piper Belongings')
    >>> piper_belongings
    <Portfolio object name=u'Piper Belongings' owner=u'syd@pf.com'>
    >>> piper_belongings_key = piper_belongings.put()
    >>> piper_belongings.default_cash_asset.name
    u'Cash USD'
    >>> piper_belongings.default_cash_opening_balance(10000.)

and we can associate each asset to a porfolio.

    >>> from thinkfar.models import Asset
    >>> from datetime import date

I've got a bike.

    >>> bike = Asset(asset_model=big_ticket_item, name=u'Bike', 
    ...     identity=u'My good looking bike', portfolio=piper_belongings)
    >>> bike
    <Asset object name=u'Bike' identity=u'My good looking bike' portfolio=u'Piper Belongings' owner=u'syd@pf.com'>
    >>> bike_key = bike.put()
    >>> bike.buy(date=date(1967, 3, 23), price=100., taxes=10.)
    >>> bike.account.balance(date(1967, 3, 22))
    0.0
    >>> bike.account.balance(date(1967, 3, 23))
    1.0

I've got a clan of gingerbread men. Here a man, there a man, lots of gingerbread men.

    >>> clan = Asset(asset_model=commodity_stock, name='Clan of gingerbread men',
    ...     portfolio=piper_belongings)
    >>> clan_key = clan.put()
    >>> clan.buy(20., date=date(1967, 3, 22), price=5.)
    >>> clan.buy(20., date=date(1967, 3, 23), price=5.)

Take a couple if you wish. They're on the dish.

    >>> clan.sell(2., date=date(1967, 3, 24), value=2.)
    >>> clan.account.balance(date(1967, 3, 23))
    40.0

I'll give you anything, everything if you want things.

    >>> len(piper_belongings.assets.fetch(1000))
    5
    >>> len(piper_belongings.total_accounts())
    5
